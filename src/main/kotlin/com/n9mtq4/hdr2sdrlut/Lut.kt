package com.n9mtq4.hdr2sdrlut

import java.io.File

/**
 * Created by will on 4/18/20 at 11:33 AM.
 *
 * @author Will "n9Mtq4" Bresnahan
 */

private val TITLE_REGEX = """TITLE "(.*)"""".toRegex()
private val SIZE_REGEX = """LUT_3D_SIZE (\d+)""".toRegex()

private fun Double.format(digits: Int) = "%.${digits}f".format(this)

open class Lut(val size: Int, var title: String = "HDR_2_SDR_generated_lut") {
	
	val table = Array(size) { Array(size) { Array(size) { DoubleArray(3) { 0.0 } } } }
	
	fun write(filePath: String) {
		
		val file = File(filePath)
		file.bufferedWriter().use { writer ->
			
			writer.write("TITLE \"$title\"")
			writer.newLine()
			writer.write("LUT_3D_SIZE $size")
			writer.newLine()
			
			for (bi in 0 until size) {
				for (gi in 0 until size) {
					for (ri in 0 until size) {
						
						val (lr, lg, lb) = table[ri][gi][bi]
						writer.write("${lr.format(6)} ${lg.format(6)} ${lb.format(6)}")
						writer.newLine()
						
					}
				}
			}
			
		}
		
	}
	
	companion object {
		
		/**
		 * Loads a 3d cube lut. Only works on a subset of the specification.
		 * Will load a lut generated by this program
		 * */
		fun load(filePath: String): Lut {
			
			val file = File(filePath)
			val reader = file.bufferedReader()
			
			val titleLine = reader.readLine()
			val sizeLine = reader.readLine()
			
			val title = TITLE_REGEX.matchEntire(titleLine)!!.groupValues[1]
			val size = SIZE_REGEX.matchEntire(sizeLine)!!.groupValues[1].toInt()
			
			val lut = Lut(size, title)
			
			reader.lineSequence().forEachIndexed { index, line -> 
				
				val bi = index / (size * size)
				val gi = (index - bi * size * size) / size
				val ri = index - bi * size * size - gi * size
				
				val vector = line.split(" ").map { it.toDouble() }.toDoubleArray()
				
				lut.table[ri][gi][bi] = vector
				
			}
			
			reader.close()
			
			return lut
			
		}
		
	}
	
}
